#!/bin/bash

findany() {
  ag --vimgrep --hidden $1
  ag --vimgrep -g $1 --hidden
}
alias findany=findany

wttr()
{
    # change Paris to your default location
    curl -H "Accept-Language: ${LANG%_*}" wttr.in/"${1:-Vilnius}"
}


deunix()
{
date -r $1 '+DATE: %Y-%m-%d %nTIME: %H:%M:%S'
echo "STMP: $1"
}


stores()
{
echo "== Starting store check =="
echo "for dir: $1"
du -h $1 | sort -h | less
}


clip_image()
{
paster | base64 --decode > /tmp/img.jpg; open /tmp/img.jpg
}

function web_encode(){
    mime_type=$(file --mime-type $1 | awk -F ": " '{print $2}')
    file_data=$(base64 $1)
    echo "data:$mime_type;base64,$file_data"
}


transf() { if [ $# -eq 0 ]; then echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"; return 1; fi
tmpfile=$( mktemp -t transferXXX ); if tty -s; then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g'); curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile; else curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ; fi; cat $tmpfile; rm -f $tmpfile; } 


transfscreen(){
    transf "$(ls -t | head -1)" 
}


transfenc(){

fname=$(basename -- "$1").gpg
gpg -ac -o- < $1 | curl -X PUT --upload-file "-" "https://transfer.sh/$fname"
}




diffclip()
{
 pbpaste > tmp.yaml ; vimdiff $1 tmp.yaml; rm tmp.yaml
}

viruscheck()
{
whois -h hash.cymru.com $(openssl sha1 $1 | awk -F "= " '{print $2}')
}

virushash()
{
whois -h hash.cymru.com $1
}


# fav(){
# 
# case "$1" in
# "dir")
#   echo "$PWD" > "$HOME/.favdir"
#   echo "updated your favourite dir to: $PWD"
#   ;;
# "dgo")
#   cd $(cat $HOME/.favdir)
#   ;;
# "song")
#   # mpc | head -n 1 >> $FSONG_FPATH && tail -n 5 $FSONG_FPATH
#   cmus-remote -Q | grep file | sed "s/.*$BEETS_PARTIAL/../g" >> $FSONG_FPATH
#   # let's remove duplicates
#   sort -u $FSONG_FPATH -o $FSONG_FPATH
#   # let's print last 5 files in the list
#   echo "[...]"
#   tail -n 5 $FSONG_FPATH
# 
#   ;;
# "list")
#   bak_list
#   ;;
# "rem8")
#   bak_rem8
#   ;;
# "cols")
#   bak_cols
#   ;;
# *)
#   echo 'Usage: fav {song|dir|dgo|}'
#   ;;
# esac
# }

# =================== BLOG FUNCS ==================== 

__blog_serve(){
cd $BLOG_DIR && bundle exec jekyll serve $1
}

__blog_edit(){
cd $BLOG_DIR && atom $BLOG_DIR
}


blog(){

case "$1" in
"go")
  cd $BLOG_DIR
  ;;
"serve")
  # cd $BLOG_DIR && bundle exec jekyll serve --drafts
  __blog_serve '--drafts'
  ;;
"serve-nd")
  echo "serving blog with drafts disabled"
  __blog_serve
  ;;
"edit")
  __blog_edit
  ;;
"cols")
  bak_cols
  ;;
*)
  echo 'Usage: blog {go|serve|serve-ng|edit}'
  ;;
esac
}


# =================== NOTEBOOK FUNCS ==================== 

__nb_go(){
  cd $NB_DIR
}

__nb_edit(){
  atom $NB_DIR
}

__nb_commit(){
  cd $NB_DIR
  git add .
  git commit  
}



nbook(){

case "$1" in
"go")
  __nb_go
  ;;
"s")
  __nb_go
  __nb_search "$2"
  ;;
"edit")
  __nb_edit
  ;;
"commit")
  __nb_commit
  ;;
*)
  echo 'Usage: nb {go|edit|s SEARCH-TERM|commit}'
  ;;
esac
}

# Ag searches

# https://github.com/ggreer/the_silver_searcher/blob/master/doc/ag.1.md "Source"
# https://stackoverflow.com/questions/18713316/search-for-files-file-names-using-silver-searcher#28056235 "Search specific files"

# Bash general

# https://superuser.com/questions/106272/how-to-call-bash-functions

# http://www.softpanorama.org/Scripting/Shellorama/Control_structures/select_statements.shtml
# https://stackoverflow.com/questions/143171/how-can-i-use-xargs-to-copy-files-that-have-spaces-and-quotes-in-their-names#143222

# READ THIS FIRST
# http://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_06.html
# https://stackoverflow.com/questions/1574898/bash-and-filenames-with-spaces#1574921
# https://stackoverflow.com/questions/10392424/how-can-i-open-vim-with-a-particular-line-number-at-the-top



function countdown(){
    date1="$(($(date +%s) + $1))"

   while [ "$date1" -ge $(date +%s) ]; do
       echo -ne "$(date -u --date @$(($date1 - $(date +%s))) +%H:%M:%S)\r";
     sleep 0.1
   done
}

function stopwatch(){
  date1=`date +%s`;
   while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
    sleep 0.1
   done
}

# Paste this function in your ".bashrc" to enable the "pomo" command in your terminal

# POMODORO Terminal:
function pomo() {
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        echo -e "POMODORO Terminal\n"
        echo "usage: pomo            25 minutes timeout"
        echo -e "   or: pomo [options]  see options below\n"
        echo "Options:"
        echo "  short: 05 minutes timeout"
        echo "  long:  15 minutes timeout"
        return
    fi

    clear
    SLEEPTIME=1500 # 25 minutes in seconds
    TITLE="CONSUMED A POMODORO"
    SUBTITLE="Take a Break"
    ICON="face-cool"
    SOUND="say \"$TITLE $SUBTITLE\""

    if [ "$1" = "long" ]; then
        SLEEPTIME=5 # 15 minutes in seconds
        TITLE="LONG BREAK FINISHED."
        SUBTITLE="Back to Work"
        ICON="face-monkey"
        SOUND="say \"$TITLE $SUBTITLE\""

    elif [ "$1" = "short" ]; then
        SLEEPTIME=300 # 5 minutes in seconds
        TITLE="SHORT BREAK FINISHED."
        SUBTITLE="Back to Work"
        ICON="face-monkey"
        SOUND="say \"$TITLE $SUBTITLE\""
    fi

    # LINUX users

    if [ "$(uname)" = 'Linux' ]; then
        eval "(countdown $SLEEPTIME && notify-send '$TITLE' '$SUBTITLE' --icon=$ICON && $SOUND &)"

    # MAC users
    elif [ "$(uname)" = 'Darwin' ]; then
        eval "(countdown $SLEEPTIME && terminal-notifier -message '$SUBTITLE' -title 'Pomodoro' --subtitle '$TITLE' && $SOUND &)"
    else
        echo "Win and BSD Zealots BTFO!";
    fi
}


ytdl(){
ssh $media "cd /media/raid/media/youtube-videos && youtube-dl $1"
}

mtdl(){
dlpath="/media/raid/media/ytdl-music"
ssh $media "cd $dlpath && youtube-dl --verbose -x -c --audio-quality 1 --audio-format mp3 --embed-thumbnail $1 && beet --verbose import -s -p $dlpath"
}

badl(){
dlroot="/media/raid/media/ytdl-music"
echo "cd $dlroot && youtube-dl $1 && beet --verbose import -p $dlroot"| ssh -t $media

#https://superuser.com/questions/261617/with-ssh-how-can-you-run-a-command-on-the-remote-machine-without-exiting#261619
}

badl320(){
dlroot="/media/raid/media/ytdl-music"
echo "cd $dlroot && youtube-dl -f mp3-320 $1 && beet --verbose import -p $dlroot && exit 0"| ssh -t $media
}

bsdl(){
dlroot="/media/raid/media/ytdl-music"
echo "cd $dlroot && youtube-dl $1 && beet --verbose import -s -p $dlroot"| ssh -t $media

#https://superuser.com/questions/261617/with-ssh-how-can-you-run-a-command-on-the-remote-machine-without-exiting#261619
}


btdl(){
url="$(curl -s $1 | grep -Eoi '<source [^>]+>' | grep -Eo 'src="[^\"]+"' | grep -Eo '(http|https)://[^"]+')"
youtube-dl "$url"
}


build_daily_logs(){

cd $DAILY_LOG_DIR
cyear=$(date +%Y -d "this year")
cmonth=$(date +%m -d "this month")
cday=$(date +%d -d "this day")
lday=$(date -d "$(($cmonth%12+1))/1 - 1 days" +%d)

mkdir -p $cyear
cd $cyear

mkdir -p $cmonth
cd $cmonth

touch {$cday..$lday}.md

echo "Files Built!"

tree "$DAILY_LOG_DIR/$cyear/$cmonth"

}
alias build_daily_logs="build_daily_logs"

daily_log(){

cd $DAILY_LOG_DIR
cyear=$(date +%Y -d "this year")
cmonth=$(date +%m -d "this month")
cday=$(date +%d -d "this day")
lday=$(date -d "$(($cmonth%12+1))/1 - 1 days" +%d)

fpath="$DAILY_LOG_DIR/$cyear/$cmonth/$cday.md"


if [ -s $fpath ]
then
        echo "file is not empty"
else
        echo "$(date '+%Y-%m-%d %H:%M:%S')" >> $fpath
fi

$EDITOR "$fpath"
}
#alias daily_log="daily_log"


btpl(){

PAGE=$(curl -s $1)
url="$(echo \"$PAGE\" | grep -Eoi '<source [^>]+>' | grep -Eo 'src="[^\"]+"' | grep -Eo '(http|https)://[^"]+')"
# url="$(curl -s $1 | grep -Eoi '<source [^>]+>' | grep -Eo 'src="[^\"]+"' | grep -Eo '(http|https)://[^"]+')"
TITLE=$(echo \"$PAGE\" | grep -oEi "<title>(.*)</title>" | cut -d '>' -f2 | cut -d '<' -f1)

mpv --ontop=yes --title="$TITLE" --snap-window --autofit-larger='25%' --geometry='-10-10' --speed 1.75 "$url"
}

__grab_title(){
TITLE=$(echo "$1" | grep -oEi "<title>(.*)</title>" | cut -d '>' -f2 | cut -d '<' -f1)
echo "$TITLE"
}

__btpl(){
url="$(curl -s $1 | grep -Eoi '<source [^>]+>' | grep -Eo 'src="[^\"]+"' | grep -Eo '(http|https)://[^"]+')"
mpv --vo=opengl --ao=alsa "$url"
}

