set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')


" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'

" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)

Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
"Plugin 'dbext.vim'
Plugin 'neocomplcache'
Plugin 'ctrlp.vim'

" All of your Plugins must be added before the following line
"https://stackoverflow.com/questions/8070892/enclosing-in-parentheses-with-vim
" go on word: ysiw + operator
Plugin 'surround.vim'

call vundle#end()            " required
filetype plugin indent on    " required
filetype plugin on
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"======================================== 

" enable syntax highlighting
syntax enable

" show line numbers
" set number

" set tabs to have 2 spaces
set ts=4

" indent when moving to the next line while writing code
" set autoindent

" expand tabs into spaces
set expandtab

" when using the >> or << commands, shift lines by 4 spaces
set shiftwidth=4

" show a visual line under the cursor's current line
set cursorline

" show the matching part of the pair for [] {} and ()
" set showmatch

" enable all Python syntax highlighting features
let python_highlight_all = 1

nnoremap ,s :setlocal spell spelllang=en_us
nnoremap ,S :set nospell
nnoremap ,w :w
nnoremap ,c :edit $HOME/.vimrc 
nnoremap T :tabnew
nnoremap ,f :%s/search/replace/gc

:set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
nnoremap ,l :set list
nnoremap ,L :set nolist
nnoremap ,b :set colorcolumn=81!
nnoremap ,B :set colorcolumn=81

map <C-n> :NERDTreeToggle<CR>
noremap <C-l> :set number! relativenumber!<CR>
" enbles spell check https://www.linux.com/learn/using-spell-checking-vim
noremap <C-g> :setlocal spell! spelllang=en_us<CR>
" colorcolumn=81

set hlsearch
set ignorecase
" FIXME: Remove for gvim 
let g:neocomplcache_enable_at_startup = 1
"let maplocalleader = '-'
"set background=dark
"colorscheme hemisu
"set spell spelllang=en_us

:set textwidth=80
":set colorcolumn=+1
":set fileencoding='utf8' 

" https://stackoverflow.com/questions/5169638/autocompletion-in-vim
" https://docs.oseems.com/general/application/vim/auto-complete-php
" vim airline setup https://github.com/vim-airline/vim-airline
let g:airline#extensions#tabline#enabled = 1
" explicit markdown
au BufRead,BufNewFile /private/tmp/*,/private/var/*,/tmp/*,~/.calcurse/notes/* set filetype=markdown
au BufRead,BufNewFile /opt/world/nginx-config/nginx/* set filetype=conf
"autocmd BufRead,BufNewFile /etc/nginx/sites-*/* setfiletype conf

" Example of dbext configuration need vim with per support
"let g:dbext_default_profile_cancer = 'type=DBI:user=test:passwd=test:driver=mysql:conn_parms=database=cancer:host=192.168.0.1'
"let g:dbext_default_profile='cancer'

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Make backspace great again!
set backspace=indent,eol,start


" Bind F5 to save file if modified and execute python script in a buffer.
nnoremap <silent> <F5> :call SaveAndExecutePython()<CR>
vnoremap <silent> <F5> :<C-u>call SaveAndExecutePython()<CR>

function! SaveAndExecutePython()
    " SOURCE [reusable window]: https://github.com/fatih/vim-go/blob/master/autoload/go/ui.vim

    " save and reload current file
    silent execute "update | edit"

    " get file path of current file
    let s:current_buffer_file_path = expand("%")

    let s:output_buffer_name = "Python"
    let s:output_buffer_filetype = "output"

    " reuse existing buffer window if it exists otherwise create a new one
    if !exists("s:buf_nr") || !bufexists(s:buf_nr)
        silent execute 'botright new ' . s:output_buffer_name
        let s:buf_nr = bufnr('%')
    elseif bufwinnr(s:buf_nr) == -1
        silent execute 'botright new'
        silent execute s:buf_nr . 'buffer'
    elseif bufwinnr(s:buf_nr) != bufwinnr('%')
        silent execute bufwinnr(s:buf_nr) . 'wincmd w'
    endif

    silent execute "setlocal filetype=" . s:output_buffer_filetype
    setlocal bufhidden=delete
    setlocal buftype=nofile
    setlocal noswapfile
    setlocal nobuflisted
    setlocal winfixheight
    setlocal cursorline " make it easy to distinguish
    setlocal nonumber
    setlocal norelativenumber
    setlocal showbreak=""

    " clear the buffer
    setlocal noreadonly
    setlocal modifiable
    %delete _

    " add the console output
    " silent execute ".!python " . shellescape(s:current_buffer_file_path, 1)
    silent execute ".!/Users/hermes/anaconda/envs/mozapi/bin/python " . shellescape(s:current_buffer_file_path, 1)

    " resize window to content length
    " Note: This is annoying because if you print a lot of lines then your code buffer is forced to a height of one line every time you run this function.
    "       However without this line the buffer starts off as a default size and if you resize the buffer then it keeps that custom size after repeated runs of this function.
    "       But if you close the output buffer then it returns to using the default size when its recreated
    "execute 'resize' . line('$')

    " make the buffer non modifiable
    setlocal readonly
    setlocal nomodifiable
endfunction
